
Hooks에서 많이 사용되는것
  useState() - state를 사용하기 위한 Hook
  useState() 사용법
    const [변수명, set함수명] = useState(초기값);

  useEffect() - side effect를 수행하기 위한 Hook
    프로그래밍에서 side effect는 부정적인 의미이다 

    그러나 React에서 side effect는 효과, 영향이라는 의미이다.

    이유로는 다른 컴포넌트에 영향을 미칠 수 있으며, 
    렌더링 중에는 작업이 완료될 수 없기 때문

    리액트의 함수 컴포넌트에서 Side effect를 실행할 수 있게 해주는 Hook
    useEffect() 사용법
      useEffect(이펙트 함수, 의존성 배열);

      만약 Effect function이 mount, unmount 시에 단 한번씩만 실행되게 하고 싶으면,
      useEffect(이펙트 함수, []);

      의존성 배열을 생략하면 컴포넌트가 업데이트될 때마다 호출 됨
      useEffect(이펙트 함수);

  useMemo() - Memoized value를 리턴하는 Hook
            컴퓨터에서 Memoized는 최적화 개념이다.
           Memoization 중복 연산을 없엘 수 있는 장점 
           간단히 생각해서 "메모를 했다가 다시 사용"하는 개념
           
           주의 할 점은 useMemo()는 렌더링이 일어나는 동안 실행된다는 점
           그래서 렌더링이 일어나는 동안 실행되면 안되는 작업을 useMemo()함수에 넣으면 안된다.
           
           예로 서버에서 데이터를 가져오거나 수동으로 DOM을 변경하는 작업 등은 렌더링이 일어나는 동안 실행되면 안되기 때문에
           useMemo() Hook에 넣으면 안되고, useEffect() Hook을 사용해야 된다.

           그리고 useMemo()안에 의존성 배열을 넣지 않을 경우, 매 렌더링마다 함수가 실행되므로
           의존성 배열을 넣지 않는다면 사용할 이유가 없다.

  useCallback() - useMemo() Hook과 유사하지만 값이 아닌 함수를 반환
            의존성 배열의 값이 바뀔때만 함수를 새로 정의해서 리턴을 해준다.
            useMemo() Hook과 같이 함수와 의존성 배열을 갖는다.

            useCallback(함수, 의존성 배열);
            useMemo(() => 함수, 의존성 배열);
            위 두개의 함수는 동일한 기능을 한다.

            만약 컴포너트 내에서 함수를 정의하면 렌더링 될 때마다 함수가 새로그려진다.
            반면 useCallback() Hook을 사용하면 변수가 변경될 때만 렌더링이 되므로
            불필요한 반복 작업이 없다.

  useRef() - Reference를 사용하기 위한 Hook
            리액터에서 Reference란 특정 컴포넌트에 접근할 수 있는 객체

            useRef() Hook에는 refObject.current라고 있는데
            현재 참조하고 있는 Element이다.

            useRef() 사용법
              const regContainer = useRef(초기값);

            useRef() Hook은 내부의 데이터가 변경되었을 때 별도로 알리지 않는다.
            그래서 DOM Node의 변경을 알리기 위해서 Callback ref를 사용해야 된다.

  Hook의 규칙
    Hook은 무조건 최상위 레벨에서만 호출해야 한다.
    Hook은 컴포넌트가 렌더링될 때마다 매번 같은 순서로 호출되어야 한다.
    리액트 함수 컴포넌트에서만 Hook을 호출해야 한다.

  리액터에서 지원하는 Hook 이외에 추가적으로 필요한 Hook 있다면
  만들어서 사용할 수 있다. 그걸 Custom Hook 이라고 말한다.

  Custom Hook을 만드는 이유는 반복적으로 사용되는 로직을 Hook으로 만들어 사용하기 위함
  Custom Hook은 이름이 use로 시작하고 내부에서 다른 Hook을 호출하는 하나의 자바스크립트 함수이다.
  Custom Hook의 이름은 반드시 use로 시작해야 한다!
  여러 개의 컴포넌트에서 하나의 Custom Hook을 사용할 때 컴포넌트 내부에 있는 모든 state, effect는 전부 분리되어 있다.
  각 Custom Hook 호출에 대해서 분리된 state를 얻게 된다.
